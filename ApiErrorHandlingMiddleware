using System.Net;
using System.Text.Json;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;

// Unified response structure
public class ApiResponse
{
    public bool Success { get; set; }
    public object? Data { get; set; }
    public string? Error { get; set; }

    public static ApiResponse Ok(object data) => new() { Success = true, Data = data };
    public static ApiResponse Fail(string error) => new() { Success = false, Error = error };
}

// Custom middleware for centralized error handling
public class ExceptionHandlingMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<ExceptionHandlingMiddleware> _logger;

    public ExceptionHandlingMiddleware(RequestDelegate next, ILogger<ExceptionHandlingMiddleware> logger)
    {
        _next = next;
        _logger = logger;
    }

    public async Task Invoke(HttpContext context)
    {
        try
        {
            // Continue processing
            await _next(context);
        }
        catch (Exception ex)
        {
            // Log and respond with unified error
            _logger.LogError(ex, "Unhandled exception");

            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
            context.Response.ContentType = "application/json";

            var response = ApiResponse.Fail("Something went wrong. Please try again.");
            var json = JsonSerializer.Serialize(response);

            await context.Response.WriteAsync(json);
        }
    }
}

// Entry point
var builder = WebApplication.CreateBuilder(args);
builder.Logging.ClearProviders();
builder.Logging.AddConsole();

var app = builder.Build();

// Register the middleware globally
app.UseMiddleware<ExceptionHandlingMiddleware>();

// Successful endpoint
app.MapGet("/hello", () =>
{
    return Results.Json(ApiResponse.Ok("Welcome to Daily .NET Core Code!"));
});

// Failing endpoint
app.MapGet("/crash", () =>
{
    throw new Exception("Simulated internal error");
});

app.Run();
